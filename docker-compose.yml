version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fmp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: fmpdata
      POSTGRES_USER: ${DB_USER:-parthbhatt}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-parthbhatt} -d fmpdata"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fmp-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fmp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fmp-network

  # FMP Data Loader - Incremental Updates (runs every hour)
  fmp-incremental:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fmp-incremental
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      FMP_API_KEY: ${FMP_API_KEY}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fmpdata
      DB_USER: ${DB_USER:-parthbhatt}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    command: ["sh", "-c", "while true; do node dist/scripts/incremental-update.js; sleep 3600; done"]
    networks:
      - fmp-network

  # FMP Data Loader - Full Updates (runs once daily)
  fmp-full:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fmp-full
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      FMP_API_KEY: ${FMP_API_KEY}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fmpdata
      DB_USER: ${DB_USER:-parthbhatt}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    command: ["sh", "-c", "while true; do node dist/scripts/update-complete-fmp-data.js full 30; sleep 86400; done"]
    networks:
      - fmp-network

  # Health Monitor
  health-monitor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fmp-health-monitor
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      FMP_API_KEY: ${FMP_API_KEY}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fmpdata
      DB_USER: ${DB_USER:-parthbhatt}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./logs:/app/logs
    ports:
      - "9090:9090"  # Metrics endpoint
    command: ["node", "dist/src/health-monitor-service.js"]
    networks:
      - fmp-network

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fmp-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@fmp.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - fmp-network
    profiles:
      - dev

  # Grafana for monitoring (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: fmp-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - fmp-network
    profiles:
      - monitoring

networks:
  fmp-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  grafana_data:
    driver: local